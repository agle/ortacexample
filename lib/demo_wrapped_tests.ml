(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-34-38"]
open Demo_wrapped
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init () = make 1000 '0'
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      size: int ;
      contents: char list }
    let init =
      let i = 1000
      and a_1 = '0' in
      {
        size =
          (try i
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "demo_wrapped.mli";
                            pos_lnum = 10;
                            pos_bol = 342;
                            pos_cnum = 363
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "demo_wrapped.mli";
                            pos_lnum = 10;
                            pos_bol = 342;
                            pos_cnum = 364
                          }
                      })));
        contents =
          (try
             Ortac_runtime.Gospelstdlib.List.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i) (fun j -> a_1)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "demo_wrapped.mli";
                            pos_lnum = 11;
                            pos_bol = 365;
                            pos_cnum = 390
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "demo_wrapped.mli";
                            pos_lnum = 11;
                            pos_bol = 365;
                            pos_cnum = 414
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen =
          struct
            include Gen
            let int = oneofl [0; 1; 2]
            let char = char_range 'a' 'z'
          end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int * char 
      | Get of int 
      | Set of int * char 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make (i, a_1) ->
          Format.asprintf "protect (fun () -> %s %a %a)" "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_char true) a_1
      | Get i_1 ->
          Format.asprintf "%s <sut> %a" "get" (Util.Pp.pp_int true) i_1
      | Set (i_2, a_2) ->
          Format.asprintf "protect (fun () -> %s <sut> %a %a)" "set"
            (Util.Pp.pp_int true) i_2 (Util.Pp.pp_char true) a_2
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun i -> fun a_1 -> Make (i, a_1))) <*>
                   small_signed_int)
                  <*> char;
               (pure (fun i_1 -> Get i_1)) <*> int;
               ((pure (fun i_2 -> fun a_2 -> Set (i_2, a_2))) <*> int) <*>
                 char])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Make (i, a_1) ->
          if
            (try
               Ortac_runtime.Gospelstdlib.(>=)
                 (Ortac_runtime.Gospelstdlib.integer_of_int i)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with | e -> false)
          then
            let t_1__005_ =
              let open ModelElt in
                {
                  size =
                    (try i
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 10;
                                      pos_bol = 342;
                                      pos_cnum = 363
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 10;
                                      pos_bol = 342;
                                      pos_cnum = 364
                                    }
                                })));
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.List.init
                         (Ortac_runtime.Gospelstdlib.integer_of_int i)
                         (fun j -> a_1)
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 11;
                                      pos_bol = 365;
                                      pos_cnum = 390
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 11;
                                      pos_bol = 365;
                                      pos_cnum = 414
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 0) t_1__005_
          else state__003_
      | Get i_1 ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ = t_2__006_ in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Set (i_2, a_2) ->
          let t_3__008_ = Model.get state__003_ 0 in
          if
            (try
               let __t1__010_ =
                 Ortac_runtime.Gospelstdlib.(<=)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
               let __t2__011_ =
                 Ortac_runtime.Gospelstdlib.(<)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                   (Ortac_runtime.Gospelstdlib.integer_of_int t_3__008_.size) in
               __t1__010_ && __t2__011_
             with | e -> false)
          then
            let t_3__009_ =
              let open ModelElt in
                {
                  t_3__008_ with
                  contents =
                    (try
                       Ortac_runtime.Gospelstdlib.List.mapi
                         (fun j_1 ->
                            fun x ->
                              if
                                j_1 =
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     i_2)
                              then a_2
                              else x) t_3__008_.contents
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 22;
                                      pos_bol = 849;
                                      pos_cnum = 874
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "demo_wrapped.mli";
                                      pos_lnum = 22;
                                      pos_bol = 849;
                                      pos_cnum = 948
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 1) t_3__009_
          else state__003_
    let precond cmd__024_ state__025_ =
      match cmd__024_ with
      | Make (i, a_1) -> true
      | Get i_1 ->
          let t_2__026_ = Model.get state__025_ 0 in
          (try
             let __t1__027_ =
               Ortac_runtime.Gospelstdlib.(<=)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                 (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
             let __t2__028_ =
               Ortac_runtime.Gospelstdlib.(<)
                 (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                 (Ortac_runtime.Gospelstdlib.integer_of_int t_2__026_.size) in
             __t1__027_ && __t2__028_
           with | e -> false)
      | Set (i_2, a_2) -> true
    let postcond _ _ _ = true
    let run cmd__029_ sut__030_ =
      match cmd__029_ with
      | Make (i, a_1) ->
          Res
            ((result sut exn),
              (let res__031_ = protect (fun () -> make i a_1) () in
               ((match res__031_ with
                 | Ok res -> SUT.push sut__030_ res
                 | Error _ -> ());
                res__031_)))
      | Get i_1 ->
          Res
            (char,
              (let t_2__032_ = SUT.get sut__030_ 0 in
               let res__033_ = get t_2__032_ i_1 in res__033_))
      | Set (i_2, a_2) ->
          Res
            ((result unit exn),
              (let t_3__034_ = SUT.get sut__030_ 0 in
               let res__035_ = protect (fun () -> set t_3__034_ i_2 a_2) () in
               res__035_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__037_ state__038_ last__040_ res__039_ =
  let open Spec in
    let open STM in
      match (cmd__037_, res__039_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          let lhs =
            if last__040_
            then "r"
            else
              (match t_1 with
               | Ok _ -> "Ok " ^ (SUT.get_name state__038_ 0)
               | Error _ -> "_")
          and shift = match t_1 with | Ok _ -> 1 | Error _ -> 0 in
          Format.asprintf "let %s = protect (fun () -> %s %a %a)" lhs "make"
            (Util.Pp.pp_int true) i (Util.Pp.pp_char true) a_1
      | (Get i_1, Res ((Char, _), _)) ->
          let lhs = if last__040_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "get"
            (SUT.get_name state__038_ (0 + shift)) (Util.Pp.pp_int true) i_1
      | (Set (i_2, a_2), Res ((Result (Unit, Exn), _), _)) ->
          let lhs = if last__040_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s %a %a)" lhs
            "set" (SUT.get_name state__038_ (0 + shift))
            (Util.Pp.pp_int true) i_2 (Util.Pp.pp_char true) a_2
      | _ -> assert false
let ortac_postcond cmd__012_ state__013_ res__014_ =
  let open Spec in
    let open STM in
      let new_state__015_ = lazy (next_state cmd__012_ state__013_) in
      match (cmd__012_, res__014_) with
      | (Make (i, a_1), Res ((Result (SUT, Exn), _), t_1)) ->
          (match if
                   try
                     Ortac_runtime.Gospelstdlib.(>=)
                       (Ortac_runtime.Gospelstdlib.integer_of_int i)
                       (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   with | e -> false
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Demo_wrapped" "make 1000 '0'"
                        (try Ortac_runtime.Exception "Invalid_argument"
                         with | e -> Ortac_runtime.Out_of_domain) "make"
                        [("i >= 0",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "demo_wrapped.mli";
                                 pos_lnum = 9;
                                 pos_bol = 324;
                                 pos_cnum = 335
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "demo_wrapped.mli";
                                 pos_lnum = 9;
                                 pos_bol = 324;
                                 pos_cnum = 341
                               }
                           })])
           with
           | None -> (match t_1 with | Ok t_1 -> None | _ -> None)
           | _ ->
               (match t_1 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      (try
                         Ortac_runtime.Gospelstdlib.(>=)
                           (Ortac_runtime.Gospelstdlib.integer_of_int i)
                           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       with | e -> false)
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Demo_wrapped" "make 1000 '0'"
                           (try Ortac_runtime.Exception "Invalid_argument"
                            with | e -> Ortac_runtime.Out_of_domain) "make"
                           [("i >= 0",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "demo_wrapped.mli";
                                    pos_lnum = 9;
                                    pos_bol = 324;
                                    pos_cnum = 335
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "demo_wrapped.mli";
                                    pos_lnum = 9;
                                    pos_bol = 324;
                                    pos_cnum = 341
                                  }
                              })])))
      | (Get i_1, Res ((Char, _), a_3)) ->
          if
            let t_old__018_ = Model.get state__013_ 0
            and t_new__019_ = lazy (Model.get (Lazy.force new_state__015_) 0) in
            (try
               a_3 =
                 (Ortac_runtime.Gospelstdlib.List.nth
                    (Lazy.force t_new__019_).contents
                    (Ortac_runtime.Gospelstdlib.integer_of_int i_1))
             with | e -> false)
          then None
          else
            Some
              (Ortac_runtime.report "Demo_wrapped" "make 1000 '0'"
                 (try
                    Ortac_runtime.Value
                      (Res
                         (char,
                           (let t_old__016_ = Model.get state__013_ 0
                            and t_new__017_ =
                              lazy (Model.get (Lazy.force new_state__015_) 0) in
                            Ortac_runtime.Gospelstdlib.List.nth
                              (Lazy.force t_new__017_).contents
                              (Ortac_runtime.Gospelstdlib.integer_of_int i_1))))
                  with | e -> Ortac_runtime.Out_of_domain) "get"
                 [("a = List.nth (t.contents) i",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "demo_wrapped.mli";
                          pos_lnum = 16;
                          pos_bol = 603;
                          pos_cnum = 615
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "demo_wrapped.mli";
                          pos_lnum = 16;
                          pos_bol = 603;
                          pos_cnum = 642
                        }
                    })])
      | (Set (i_2, a_2), Res ((Result (Unit, Exn), _), res)) ->
          (match if
                   let tmp__021_ = Model.get state__013_ 0 in
                   try
                     let __t1__022_ =
                       Ortac_runtime.Gospelstdlib.(<=)
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
                     let __t2__023_ =
                       Ortac_runtime.Gospelstdlib.(<)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                         (Ortac_runtime.Gospelstdlib.integer_of_int
                            tmp__021_.size) in
                     __t1__022_ && __t2__023_
                   with | e -> false
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Demo_wrapped" "make 1000 '0'"
                        (try Ortac_runtime.Exception "Invalid_argument"
                         with | e -> Ortac_runtime.Out_of_domain) "set"
                        [("0 <= i < t.size",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "demo_wrapped.mli";
                                 pos_lnum = 20;
                                 pos_bol = 798;
                                 pos_cnum = 809
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "demo_wrapped.mli";
                                 pos_lnum = 20;
                                 pos_bol = 798;
                                 pos_cnum = 824
                               }
                           })])
           with
           | None -> (match res with | Ok _ -> None | _ -> None)
           | _ ->
               (match res with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      let tmp__021_ = Model.get state__013_ 0 in
                      (try
                         let __t1__022_ =
                           Ortac_runtime.Gospelstdlib.(<=)
                             (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
                         let __t2__023_ =
                           Ortac_runtime.Gospelstdlib.(<)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                             (Ortac_runtime.Gospelstdlib.integer_of_int
                                tmp__021_.size) in
                         __t1__022_ && __t2__023_
                       with | e -> false)
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Demo_wrapped" "make 1000 '0'"
                           (try Ortac_runtime.Exception "Invalid_argument"
                            with | e -> Ortac_runtime.Out_of_domain) "set"
                           [("0 <= i < t.size",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "demo_wrapped.mli";
                                    pos_lnum = 20;
                                    pos_bol = 798;
                                    pos_cnum = 809
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "demo_wrapped.mli";
                                    pos_lnum = 20;
                                    pos_bol = 798;
                                    pos_cnum = 824
                                  }
                              })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Demo_wrapped STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
