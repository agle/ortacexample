(* This file is generated by ortac wrapper,
   edit the original interface file instead *)
include Demo
module Ortac_runtime = Ortac_runtime
let __projection_size__001_ __arg0 =
  let __error__003_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 5;
            pos_bol = 167;
            pos_cnum = 167
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 5;
            pos_bol = 167;
            pos_cnum = 189
          }
      } "__projection_size__001_" in
  let result =
    try size __arg0
    with
    | Stack_overflow | Out_of_memory as e ->
        (Ortac_runtime.Errors.report __error__003_; raise e)
    | e ->
        ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
           |> (Ortac_runtime.Errors.register __error__003_);
         Ortac_runtime.Errors.report __error__003_;
         raise e) in
  Ortac_runtime.Errors.report __error__003_; result
let __projection_contents__002_ __arg0_1 =
  let __error__004_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 6;
            pos_bol = 190;
            pos_cnum = 190
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 6;
            pos_bol = 190;
            pos_cnum = 220
          }
      } "__projection_contents__002_" in
  let result_1 =
    try contents __arg0_1
    with
    | Stack_overflow | Out_of_memory as e ->
        (Ortac_runtime.Errors.report __error__004_; raise e)
    | e ->
        ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
           |> (Ortac_runtime.Errors.register __error__004_);
         Ortac_runtime.Errors.report __error__004_;
         raise e) in
  Ortac_runtime.Errors.report __error__004_; result_1
let size __arg0 =
  let __error__003_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 5;
            pos_bol = 167;
            pos_cnum = 167
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 5;
            pos_bol = 167;
            pos_cnum = 189
          }
      } "size" in
  Ortac_runtime.Errors.report __error__003_;
  (let result =
     try size __arg0
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__003_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__003_);
          Ortac_runtime.Errors.report __error__003_;
          raise e) in
   Ortac_runtime.Errors.report __error__003_; result)
let contents __arg0_1 =
  let __error__004_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 6;
            pos_bol = 190;
            pos_cnum = 190
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 6;
            pos_bol = 190;
            pos_cnum = 220
          }
      } "contents" in
  Ortac_runtime.Errors.report __error__004_;
  (let result_1 =
     try contents __arg0_1
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__004_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__004_);
          Ortac_runtime.Errors.report __error__004_;
          raise e) in
   Ortac_runtime.Errors.report __error__004_; result_1)
let make i a_1 =
  let __error__005_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 7;
            pos_bol = 221;
            pos_cnum = 221
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 11;
            pos_bol = 402;
            pos_cnum = 454
          }
      } "make" in
  let __check__006_ =
    try
      Ortac_runtime.Gospelstdlib.(>=)
        (Ortac_runtime.Gospelstdlib.integer_of_int i)
        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
    with
    | e ->
        ((Ortac_runtime.Specification_failure
            { term = "i >= 0"; term_kind = Check; exn = e })
           |> (Ortac_runtime.Errors.register __error__005_);
         true) in
  Ortac_runtime.Errors.report __error__005_;
  (let t_1 =
     try make i a_1
     with
     | Invalid_argument _ as e ->
         ((if true && __check__006_
           then
             (Ortac_runtime.Unexpected_checks { terms = [] }) |>
               (Ortac_runtime.Errors.register __error__005_);
           Ortac_runtime.Errors.report __error__005_);
          raise e)
     | Stack_overflow | Out_of_memory as e ->
         ((if not __check__006_
           then
             (Ortac_runtime.Uncaught_checks { term = "i >= 0" }) |>
               (Ortac_runtime.Errors.register __error__005_);
           Ortac_runtime.Errors.report __error__005_);
          raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__005_);
          (if not __check__006_
           then
             (Ortac_runtime.Uncaught_checks { term = "i >= 0" }) |>
               (Ortac_runtime.Errors.register __error__005_);
           Ortac_runtime.Errors.report __error__005_);
          raise e) in
   if
     not
       (try
          (__projection_contents__002_ t_1) =
            (Ortac_runtime.Gospelstdlib.List.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i) (fun j -> a_1))
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                {
                  term = "t.contents = List.init i (fun j -> a)";
                  term_kind = Post;
                  exn = e
                })
               |> (Ortac_runtime.Errors.register __error__005_);
             true))
   then
     (Ortac_runtime.Violated_condition
        { term = "t.contents = List.init i (fun j -> a)"; term_kind = Post })
       |> (Ortac_runtime.Errors.register __error__005_);
   if
     not
       (try (__projection_size__001_ t_1) = i
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                { term = "t.size = i"; term_kind = Post; exn = e })
               |> (Ortac_runtime.Errors.register __error__005_);
             true))
   then
     (Ortac_runtime.Violated_condition
        { term = "t.size = i"; term_kind = Post })
       |> (Ortac_runtime.Errors.register __error__005_);
   if not __check__006_
   then
     (Ortac_runtime.Uncaught_checks { term = "i >= 0" }) |>
       (Ortac_runtime.Errors.register __error__005_);
   Ortac_runtime.Errors.report __error__005_;
   t_1)
let get t_2 i_1 =
  let __error__007_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 13;
            pos_bol = 456;
            pos_cnum = 456
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 16;
            pos_bol = 614;
            pos_cnum = 656
          }
      } "get" in
  if
    not
      (try
         let __t1__008_ =
           Ortac_runtime.Gospelstdlib.(<=)
             (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
         let __t2__009_ =
           Ortac_runtime.Gospelstdlib.(<)
             (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
             (Ortac_runtime.Gospelstdlib.integer_of_int
                (__projection_size__001_ t_2)) in
         __t1__008_ && __t2__009_
       with
       | e ->
           ((Ortac_runtime.Specification_failure
               { term = "0 <= i < t.size"; term_kind = Pre; exn = e })
              |> (Ortac_runtime.Errors.register __error__007_);
            true))
  then
    (Ortac_runtime.Violated_condition
       { term = "0 <= i < t.size"; term_kind = Pre })
      |> (Ortac_runtime.Errors.register __error__007_);
  Ortac_runtime.Errors.report __error__007_;
  (let a_2 =
     try get t_2 i_1
     with
     | Stack_overflow | Out_of_memory as e ->
         (Ortac_runtime.Errors.report __error__007_; raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__007_);
          Ortac_runtime.Errors.report __error__007_;
          raise e) in
   if
     not
       (try
          a_2 =
            (Ortac_runtime.Gospelstdlib.List.nth
               (__projection_contents__002_ t_2)
               (Ortac_runtime.Gospelstdlib.integer_of_int i_1))
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                {
                  term = "a = List.nth (t.contents) i";
                  term_kind = Post;
                  exn = e
                })
               |> (Ortac_runtime.Errors.register __error__007_);
             true))
   then
     (Ortac_runtime.Violated_condition
        { term = "a = List.nth (t.contents) i"; term_kind = Post })
       |> (Ortac_runtime.Errors.register __error__007_);
   Ortac_runtime.Errors.report __error__007_;
   a_2)
let set t_3 i_2 a_3 =
  let __error__010_ =
    Ortac_runtime.Errors.create
      {
        Ortac_runtime.start =
          {
            pos_fname = "demo.mli";
            pos_lnum = 18;
            pos_bol = 658;
            pos_cnum = 658
          };
        Ortac_runtime.stop =
          {
            pos_fname = "demo.mli";
            pos_lnum = 22;
            pos_bol = 904;
            pos_cnum = 1006
          }
      } "set" in
  let ___ortac_copy_1 = Ortac_runtime.copy t_3 in
  let __check__013_ =
    try
      let __t1__011_ =
        Ortac_runtime.Gospelstdlib.(<=)
          (Ortac_runtime.Gospelstdlib.integer_of_int 0)
          (Ortac_runtime.Gospelstdlib.integer_of_int i_2) in
      let __t2__012_ =
        Ortac_runtime.Gospelstdlib.(<)
          (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
          (Ortac_runtime.Gospelstdlib.integer_of_int t_3.size) in
      __t1__011_ && __t2__012_
    with
    | e ->
        ((Ortac_runtime.Specification_failure
            { term = "0 <= i < t.size"; term_kind = Check; exn = e })
           |> (Ortac_runtime.Errors.register __error__010_);
         true) in
  Ortac_runtime.Errors.report __error__010_;
  (let () =
     try set t_3 i_2 a_3
     with
     | Invalid_argument _ as e ->
         ((if true && __check__013_
           then
             (Ortac_runtime.Unexpected_checks { terms = [] }) |>
               (Ortac_runtime.Errors.register __error__010_);
           Ortac_runtime.Errors.report __error__010_);
          raise e)
     | Stack_overflow | Out_of_memory as e ->
         ((if not __check__013_
           then
             (Ortac_runtime.Uncaught_checks { term = "0 <= i < t.size" }) |>
               (Ortac_runtime.Errors.register __error__010_);
           Ortac_runtime.Errors.report __error__010_);
          raise e)
     | e ->
         ((Ortac_runtime.Unexpected_exception { allowed_exn = []; exn = e })
            |> (Ortac_runtime.Errors.register __error__010_);
          (if not __check__013_
           then
             (Ortac_runtime.Uncaught_checks { term = "0 <= i < t.size" }) |>
               (Ortac_runtime.Errors.register __error__010_);
           Ortac_runtime.Errors.report __error__010_);
          raise e) in
   if
     not
       (try
          (__projection_contents__002_ t_3) =
            (Ortac_runtime.Gospelstdlib.List.mapi
               (fun j_1 ->
                  fun x ->
                    if j_1 = (Ortac_runtime.Gospelstdlib.integer_of_int i_2)
                    then a_3
                    else x) (__projection_contents__002_ ___ortac_copy_1))
        with
        | e ->
            ((Ortac_runtime.Specification_failure
                {
                  term =
                    "t.contents = List.mapi (fun j x -> if j = (i : integer) then a else x) (old t.contents)";
                  term_kind = Post;
                  exn = e
                })
               |> (Ortac_runtime.Errors.register __error__010_);
             true))
   then
     (Ortac_runtime.Violated_condition
        {
          term =
            "t.contents = List.mapi (fun j x -> if j = (i : integer) then a else x) (old t.contents)";
          term_kind = Post
        })
       |> (Ortac_runtime.Errors.register __error__010_);
   if not __check__013_
   then
     (Ortac_runtime.Uncaught_checks { term = "0 <= i < t.size" }) |>
       (Ortac_runtime.Errors.register __error__010_);
   Ortac_runtime.Errors.report __error__010_;
   ())
